# Первое домашнее задание по ЭВМ. Последовательный и параллельный алгоритм.

from graph import Graph
from algorithms import sequential_algorithm, iterative_algorithm, calculate_Q

# Вариант 1
matrix = [
    [0, 1, 0, 3, 2, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 4, 2, 3, 0, 2, 3, 2, 2, 3],
    [1, 0, 4, 4, 3, 0, 0, 2, 0, 0, 0, 0, 3, 4, 0, 0, 2, 0, 0, 2, 4, 2, 1, 0, 1, 3, 2, 2, 0, 0],
    [0, 4, 0, 2, 0, 0, 1, 0, 3, 0, 0, 0, 0, 3, 0, 0, 3, 2, 0, 0, 0, 3, 3, 2, 0, 1, 2, 4, 1, 0],
    [3, 4, 2, 0, 1, 0, 3, 0, 0, 1, 0, 4, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [2, 3, 0, 1, 0, 2, 0, 1, 0, 3, 2, 0, 2, 0, 0, 0, 0, 0, 1, 0, 4, 4, 3, 4, 1, 3, 3, 2, 1, 3],
    [0, 0, 0, 0, 2, 0, 3, 0, 4, 4, 0, 0, 4, 0, 4, 0, 2, 0, 3, 2, 1, 3, 0, 0, 3, 2, 0, 1, 4, 0],
    [2, 0, 1, 3, 0, 3, 0, 4, 0, 4, 0, 0, 1, 0, 0, 0, 0, 3, 0, 1, 3, 1, 1, 2, 1, 4, 1, 1, 0, 3],
    [3, 2, 0, 0, 1, 0, 4, 0, 2, 4, 0, 0, 1, 1, 4, 0, 0, 2, 0, 0, 4, 2, 3, 0, 2, 0, 2, 0, 4, 0],
    [3, 0, 3, 0, 0, 4, 0, 2, 0, 0, 0, 4, 1, 3, 4, 0, 0, 1, 0, 2, 3, 0, 2, 2, 4, 0, 0, 0, 4, 0],
    [0, 0, 0, 1, 3, 4, 4, 4, 0, 0, 0, 0, 0, 1, 1, 3, 0, 2, 3, 0, 2, 0, 3, 0, 1, 3, 0, 3, 0, 3],
    [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 1, 4, 0, 0, 0, 4, 0, 3, 0, 3, 0, 0, 2, 3, 1, 0],
    [0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 0, 3, 0, 0, 2, 0, 2, 1, 1, 2, 0, 0, 0, 3, 0, 2, 2, 0],
    [0, 3, 0, 0, 2, 4, 1, 1, 1, 0, 4, 0, 0, 0, 2, 4, 4, 0, 0, 3, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0],
    [0, 4, 3, 0, 0, 0, 0, 1, 3, 1, 0, 3, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 3, 0, 0],
    [0, 0, 0, 0, 0, 4, 0, 4, 4, 1, 1, 0, 2, 2, 0, 4, 4, 1, 4, 0, 2, 2, 0, 2, 0, 0, 0, 0, 3, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 4, 0, 4, 0, 0, 0, 4, 3, 0, 2, 1, 4, 0, 4, 0, 0, 0, 2],
    [0, 2, 3, 3, 0, 2, 0, 0, 0, 0, 0, 2, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 3, 3, 0, 0, 1],
    [0, 0, 2, 0, 0, 0, 3, 2, 1, 2, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 4, 0, 2, 0, 1, 0, 1, 4, 2],
    [3, 0, 0, 0, 1, 3, 0, 0, 0, 3, 0, 2, 0, 1, 4, 4, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0],
    [0, 2, 0, 2, 0, 2, 1, 0, 2, 0, 4, 1, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 2, 3, 0, 0],
    [2, 4, 0, 0, 4, 1, 3, 4, 3, 2, 0, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 1, 4, 0, 3, 4, 0, 3],
    [4, 2, 3, 0, 4, 3, 1, 2, 0, 0, 3, 2, 0, 0, 2, 2, 0, 4, 3, 0, 3, 0, 0, 2, 3, 0, 1, 0, 0, 3],
    [2, 1, 3, 4, 3, 0, 1, 3, 2, 3, 0, 0, 0, 2, 0, 1, 1, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0],
    [3, 0, 2, 0, 4, 0, 2, 0, 2, 0, 3, 0, 0, 0, 2, 4, 0, 2, 0, 4, 1, 2, 0, 0, 4, 1, 4, 1, 2, 2],
    [0, 1, 0, 0, 1, 3, 1, 2, 4, 1, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 3, 2, 4, 0, 0, 0, 0, 0, 2],
    [2, 3, 1, 0, 3, 2, 4, 0, 0, 3, 0, 3, 0, 0, 0, 4, 3, 1, 0, 0, 0, 0, 0, 1, 0, 0, 4, 1, 3, 3],
    [3, 2, 2, 0, 3, 0, 1, 2, 0, 0, 2, 0, 1, 1, 0, 0, 3, 0, 0, 2, 3, 1, 0, 4, 0, 4, 0, 3, 0, 1],
    [2, 2, 4, 0, 2, 1, 1, 0, 0, 3, 3, 2, 0, 3, 0, 0, 0, 1, 3, 3, 4, 0, 0, 1, 0, 1, 3, 0, 0, 0],
    [2, 0, 1, 0, 1, 4, 0, 4, 4, 0, 1, 2, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 4, 2, 0, 3, 0, 0, 0, 2],
    [3, 0, 0, 0, 3, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 3, 3, 0, 2, 2, 3, 1, 0, 2, 0]
]

graph = Graph(matrix)

groups = sequential_algorithm(graph, [7, 6, 5, 4, 4, 4], info = False)

print("AFTER SEQUETIAL ALGORITHM")
print("GROUPS: ")
for i in range(0, len(groups)):
    groups[i].sort()
    print("Group #", i)
    print([x+1 for x in groups[i]])

print("Sequential Q = ", calculate_Q(graph, groups))

groups = iterative_algorithm(graph, groups, info = True)

print("AFTER ITEARTIVE ALGORITHM")
print("GROUPS ITERATIVE: ")
for i in range(0, len(groups)):
    groups[i].sort()
    print("Group #", i+1)
    print([x+1 for x in groups[i]])


print("Iterative Q = ", calculate_Q(graph, groups))